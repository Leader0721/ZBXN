package com.zbxn.main.activity.mission;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.view.Display;import android.view.MenuItem;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TextView;import com.pub.base.BaseActivity;import com.pub.base.BaseApp;import com.pub.common.EventCustom;import com.pub.dialog.InputDialog;import com.pub.dialog.MessageDialog;import com.pub.dialog.ProgressDialog;import com.pub.http.HttpCallBack;import com.pub.http.HttpRequest;import com.pub.http.ResultData;import com.pub.utils.MyToast;import com.pub.utils.PreferencesUtils;import com.pub.utils.StringUtils;import com.pub.widget.ProgressLayout;import com.pub.widget.pulltorefreshlv.PullRefreshListView;import com.zbxn.R;import com.zbxn.main.activity.login.LoginActivity;import com.zbxn.main.adapter.MissionAdapter;import com.zbxn.main.adapter.PopupwindowTypeListAdapter;import com.zbxn.main.entity.ApprovalEntity;import com.zbxn.main.entity.MissionDetailEntity;import com.zbxn.main.entity.MissionEntity;import com.zbxn.main.popupwindow.PopupWindowType;import org.simple.eventbus.Subscriber;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import retrofit2.Call;/** * @author: ysj * @date: 2016-11-09 09:58 */public class MissionActivity extends BaseActivity implements AdapterView.OnItemClickListener, MissionAdapter.ItemCallBack {    private static final int Misson_CallBack_Creat = 1001;    private static final int Misson_CallBack_Detail = 1002;    private static final int Misson_CallBack_Search = 1003;    //打开评论页    private static final int REQUEST_COMMENT_ACTIVITY = 1006;    @BindView(R.id.mLeft)    TextView mLeft;    @BindView(R.id.layout_left)    RelativeLayout layoutLeft;    @BindView(R.id.mRight)    TextView mRight;    @BindView(R.id.layout_right)    RelativeLayout layoutRight;    @BindView(R.id.mListView)    PullRefreshListView mListView;    @BindView(R.id.layout_progress)    ProgressLayout layoutProgress;    @BindView(R.id.mLayout)    LinearLayout mLayout;    @BindView(R.id.mMiddle)    TextView mMiddle;    @BindView(R.id.layout_middle)    RelativeLayout layoutMiddle;    private List<ApprovalEntity> listLeft; //任务类型    private List<ApprovalEntity> listMiddle;//任务    private List<ApprovalEntity> listRight; // 任务状态    private int pageSize = 10; //每页条数    private MissionAdapter mAdapter;    private List<MissionEntity> mList;    private int mIndex = 1; //记录页数    private int leftState = 0; //记录任务类型    private int middleState = 2;    private int rightState = -1; // 记录任务状态  -1全部  1进行中    private int position;    private String mTaskState;    private String searchText = ""; // 记录搜索关键词    private TextView mComment;    private int mState; // 主任务进度    private String mTaskId; // 任务id    private int mStatePerson; // 执行人任务进度    private ProgressDialog mProgressDialog;    private MessageDialog messageDialog;    private InputDialog mDialog;    private List<MissionDetailEntity> missionList;    private boolean isChildListNull;    private String mParentId = "";    private boolean isFirst;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_misson);        ButterKnife.bind(this);        mParentId = getIntent().getStringExtra("id");        if (StringUtils.isEmpty(mParentId)) {            mParentId = "";            setTitle("主任务列表");        } else {            setTitle("子任务列表");            mLayout.setVisibility(View.GONE);        }        PopupwindowTypeListAdapter.savePosionLeft = -1;        PopupwindowTypeListAdapter.savePosionMiddle = -1;        PopupwindowTypeListAdapter.savePosionRight = -1;        PopupwindowTypeListAdapter.TYPE_APPLY = 101;        initListType();        initView();        isFirst = PreferencesUtils.getBoolean(this, "missionFirst", true);        //如果是第一次打开此界面        if (isFirst) {            showGuide(0, 0);            PreferencesUtils.putBoolean(this, "missionFirst", false);        }    }    /**     * 显示蒙版引导     */    private void showGuide(float x, float y) {        //, R.style.Dialog_Fullscreen style:使dialog沾满全屏，包括状态栏的位置        final AlertDialog ad = new AlertDialog.Builder(this).create();// 创建        ad.setCanceledOnTouchOutside(false);        ad.setCancelable(true);        // 显示对话框        ad.show();        WindowManager windowManager = getWindowManager();        Display display = windowManager.getDefaultDisplay();        WindowManager.LayoutParams lp = ad.getWindow().getAttributes();        lp.width = display.getWidth(); //设置宽度        lp.height = display.getHeight();        ad.getWindow().setAttributes(lp);        Window window = ad.getWindow();        window.setBackgroundDrawable(new BitmapDrawable());        window.setContentView(R.layout.dialog_guide_mission);        ImageView img = (ImageView) window.findViewById(R.id.img_bt);        img.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ad.dismiss();            }        });    }    @Override    public void initRight() {        super.initRight();        setRight1("新建任务");        setRight1Icon(R.mipmap.menu_creat_blog);        setRight1Show(true);        setRight2("搜索");        setRight2Icon(R.mipmap.mission_search);        setRight2Show(true);    }    @Override    public void actionRight1(MenuItem menuItem) {        super.actionRight1(menuItem);        Intent intent = new Intent(this, MissionCreatActivity.class);        intent.putExtra("parentId", mParentId);        startActivityForResult(intent, Misson_CallBack_Creat);    }    @Override    public void actionRight2(MenuItem menuItem) {        super.actionRight2(menuItem);        Intent searchIntent = new Intent(this, SearchActivity.class);        startActivityForResult(searchIntent, Misson_CallBack_Search);    }    //修改任务详情后主页面刷新    @Subscriber    public void onEventMainThread(EventCustom eventCustom) {        if (MissionUpdateActivity.SUCCESS.equals(eventCustom.getTag())) {            mListView.startFirst();            setRefresh();        }        if (MissionDetailsActivity.SUCCESS.equals(eventCustom.getTag())) {            mListView.startFirst();            setRefresh();        }    }    private void initListType() {        listLeft = new ArrayList<>();        listLeft.add(new ApprovalEntity(0, "全部"));        listLeft.add(new ApprovalEntity(1, "我创建"));        listLeft.add(new ApprovalEntity(2, "我执行"));        listLeft.add(new ApprovalEntity(4, "我负责"));        listLeft.add(new ApprovalEntity(5, "我评审"));        listMiddle = new ArrayList<>();        listMiddle.add(new ApprovalEntity(2, "进行中"));        listMiddle.add(new ApprovalEntity(1, "待接受"));        listMiddle.add(new ApprovalEntity(8, "已拒绝"));        listMiddle.add(new ApprovalEntity(6, "任务归档"));        listMiddle.add(new ApprovalEntity(13, "任务统计"));        listMiddle.add(new ApprovalEntity(16, "任务监督"));        listMiddle.add(new ApprovalEntity(11, "任务交接"));        listMiddle.add(new ApprovalEntity(0, "草稿箱"));        setRightList(2);    }    private void initView() {        mList = new ArrayList<>();        mAdapter = new MissionAdapter(this, mList, this);        mListView.setAdapter(mAdapter);        mListView.setOnItemClickListener(this);        mListView.startFirst();        setRefresh();        mListView.setOnPullListener(new PullRefreshListView.OnPullListener() {            @Override            public void onRefresh() {                mListView.startFirst();                setRefresh();            }            @Override            public void onLoad() {                getMissionList();            }        });        mProgressDialog = new ProgressDialog(this);        mProgressDialog.setMessage("正在提交");        mProgressDialog.setCancelable(false);    }    @OnClick({R.id.layout_left, R.id.layout_right, R.id.layout_middle})    public void onClick(View view) {        switch (view.getId()) {            case R.id.layout_left:                setPopupWindow(mLeft, mLeft.getWidth(), listLeft, "类型", 0, mLeft, 1);                break;            case R.id.layout_middle:                setPopupWindow(mLeft, mLeft.getWidth(), listMiddle, "进行中", 2, mLeft, 3);                break;            case R.id.layout_right:                setPopupWindow(mRight, mRight.getWidth(), listRight, "全部", 1, mLeft, 2);                break;        }    }    //类型item的点击事件    private AdapterView.OnItemClickListener listener = new AdapterView.OnItemClickListener() {        @Override        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {            if (id == 0) {//最左边                ApprovalEntity entity = listLeft.get(position);                mLeft.setText(entity.getName());                leftState = entity.getTypeid();                if (leftState == 0) {                    mLeft.setText("类型");                }                PopupwindowTypeListAdapter.savePosionLeft = position;            } else if (id == 1) {//最右边                ApprovalEntity entity = listRight.get(position);                mRight.setText(entity.getName());                rightState = entity.getTypeid();                if (rightState == -1) {                    mRight.setText("全部");                }                PopupwindowTypeListAdapter.savePosionRight = position;            } else if (id == 2) {//中间                ApprovalEntity entity = listMiddle.get(position);                mMiddle.setText(entity.getName());                middleState = entity.getTypeid();                setRightList(middleState);                rightState = -1;                PopupwindowTypeListAdapter.savePosionRight = -1;                mRight.setText(listRight.get(0).getName());                PopupwindowTypeListAdapter.savePosionMiddle = position;            }            mListView.startFirst();            setRefresh();        }    };    //设置右边list    private void setRightList(int taskstate) {        listRight = new ArrayList<>();        listRight.clear();        switch (taskstate) {            case 2://进行中                listRight.add(new ApprovalEntity(-1, "全部"));                listRight.add(new ApprovalEntity(3, "待审核"));                listRight.add(new ApprovalEntity(4, "已超期"));                listRight.add(new ApprovalEntity(5, "已驳回"));                listRight.add(new ApprovalEntity(14, "紧急"));                listRight.add(new ApprovalEntity(8, "已拒绝"));                listRight.add(new ApprovalEntity(1, "待接受"));                break;            case 1://待接受                listRight.add(new ApprovalEntity(-1, "全部"));                listRight.add(new ApprovalEntity(10, "新任务"));                listRight.add(new ApprovalEntity(14, "紧急"));                break;            case 8://已拒绝                listRight.add(new ApprovalEntity(-1, "全部"));                break;            case 6://任务归档                listRight.add(new ApprovalEntity(-1, "全部"));                break;            case 13://任务统计                listRight.add(new ApprovalEntity(-1, "全部"));                break;            case 16://任务监督                listRight.add(new ApprovalEntity(-1, "全部"));                break;            case 11://任务交接                listRight.add(new ApprovalEntity(-1, "全部"));                break;            case 0://草稿箱                listRight.add(new ApprovalEntity(-1, "全部"));                break;            default:                break;        }    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        if (mList != null) {            Intent intent = new Intent(this, MissionDetailsActivity.class);            String missionID = mList.get(position).getID();            intent.putExtra("id", missionID);            startActivityForResult(intent, Misson_CallBack_Detail);            mComment = ((TextView) view.findViewById(R.id.mComment));        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == Misson_CallBack_Creat) {//创建回调            if (resultCode == RESULT_OK) {                mListView.startFirst();                setRefresh();            }        }        if (requestCode == Misson_CallBack_Detail) {//详情回调            if (resultCode == RESULT_OK) {                mListView.startFirst();                setRefresh();            }        }        if (requestCode == Misson_CallBack_Search) {//搜索回调            if (resultCode == RESULT_OK) {                searchText = data.getStringExtra("content");                mListView.startFirst();                setRefresh();                searchText = "";            }        }    }    /**     * 刷新     */    public void setRefresh() {        mIndex = 1;        getMissionList();    }    //设置PopupWindow    public void setPopupWindow(View view, float width, List<ApprovalEntity> list, String type, long flag, View location, int types) {        PopupWindowType mpopupWindowMeetingType = new PopupWindowType(this, view, width, listener, list, type, flag, types);        ColorDrawable dw1 = new ColorDrawable(0xffffffff);        //设置SelectPicPopupWindow弹出窗体的背景        mpopupWindowMeetingType.setBackgroundDrawable(dw1);        mpopupWindowMeetingType.setOnDismissListener(new PopupWindow.OnDismissListener() {            @Override            public void onDismiss() {                mLeft.setTextColor(getResources().getColor(R.color.app_primary_text));                mMiddle.setTextColor(getResources().getColor(R.color.app_primary_text));                mRight.setTextColor(getResources().getColor(R.color.app_primary_text));            }        });        //设置layout在PopupWindow中显示的位置        mpopupWindowMeetingType.showAsDropDown(location, 1, 1);        if (types == 1) {            mLeft.setTextColor(getResources().getColor(R.color.app_listview_slidemenu_1));        } else if (types == 3) {            mMiddle.setTextColor(getResources().getColor(R.color.app_listview_slidemenu_1));        } else if (types == 2) {            mRight.setTextColor(getResources().getColor(R.color.app_listview_slidemenu_1));        }    }    /**     * 显示加载更多     *     * @param mResult     */    private void setMore(List mResult) {        if (mResult == null) {            mListView.setHasMoreData(true);            return;        }        int pageTotal = mResult.size();        if (pageTotal >= pageSize) {            mListView.setHasMoreData(true);            mListView.setPullLoadEnabled(true);        } else {            mListView.setHasMoreData(false);            mListView.setPullLoadEnabled(false);        }    }    @Override    public void onTextViewClick(View view, final int position, final String actionType, boolean isType) {//       mState = taskState;        mTaskId = mList.get(position).getID();//        mStatePerson = taskPersonState;        this.position = position;        // 负责人拒绝 5 执行人拒绝7 审核人驳回10        if ("5".equals(actionType) || "7".equals(actionType) || "10".equals(actionType)) {            mDialog = new InputDialog(MissionActivity.this);            mDialog.setTitle("理由");            mDialog.setContentHint("请输入理由");            mDialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    String content = mDialog.getEditText().getText().toString();                    if (!StringUtils.isEmpty(content)) {                        postTaskState(content, actionType);                    } else {                        MyToast.showToast("理由不能为空");                    }                }            });            mDialog.setNegativeButton("取消", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                }            });            mDialog.show();        } else if ("-1".equals(actionType)) {            Intent intents = new Intent(MissionActivity.this, CommentActivity.class);            intents.putExtra("TaskId", mTaskId);            startActivityForResult(intents, REQUEST_COMMENT_ACTIVITY);        } else if ("0".equals(actionType)) {        } else {            postTaskState("", actionType);        }    }    /**     * 获取任务列表     */    public void getMissionList() {        String ssid = PreferencesUtils.getString(this, LoginActivity.FLAG_SSID);        String CurrentCompanyId = PreferencesUtils.getString(BaseApp.getContext(), LoginActivity.FLAG_ZMSCOMPANYID, "");        String task = "";        String taskSecondary = "";        task = middleState + "";        if (rightState == -1) {            taskSecondary = "";        } else {            taskSecondary = rightState + "";        }//2进行中          二级：3待审核4已超期5已驳回14紧急8已拒绝1待接受//1待接受          二级：10新任务14紧急//8已拒绝//0草稿箱//6任务归档//13任务统计//16任务监督//11任务交接        //根据以前的传现在的值//        if (rightState == -1) {//全部//            task = "";//            taskSecondary = "";//        } else if (rightState == 0) {//进行中 待接受//            task = "2";//            taskSecondary = "1";//        } else if (rightState == 1) {//进行中//            task = "2";//            taskSecondary = "";//        } else if (rightState == 2) {//待审核//            task = "2";//            taskSecondary = "3";//        } else if (rightState == 3) {//已完成//            task = "6";//            taskSecondary = "";//        } else if (rightState == 4) {//已拒绝//            task = "8";//            taskSecondary = "";//        } else if (rightState == 5) {//已驳回//            task = "2";//            taskSecondary = "5";//        } else if (rightState == 6) {//已超期//            task = "2";//            taskSecondary = "4";//        } else if (rightState == 7) {//草稿箱//            task = "0";//            taskSecondary = "";//        } else if (rightState == 8) {//待接受待接受//            task = "1";//            taskSecondary = "";//        }        Call call = HttpRequest.getIResourceOANetAction().getMissionList(ssid, mParentId, searchText, leftState + "", task, taskSecondary, mIndex + "", pageSize + "", CurrentCompanyId);        callRequest(call, new HttpCallBack(MissionEntity.class, this, false) {            @Override            public void onSuccess(ResultData mResult) {                if ("0".equals(mResult.getSuccess())) {//0成功                    layoutProgress.showContent();                    setRight1Show(true);                    List<MissionEntity> list = mResult.getRows();                    if (mIndex == 1) {                        mList.clear();                    }                    mIndex++;                    mList.addAll(list);                    mAdapter.notifyDataSetChanged();                    setMore(list);                    mListView.onRefreshFinish();                } else {                    try {                        setRight1Show(false);                    } catch (Exception e) {                    }                    MyToast.showToast(mResult.getMsg());                    mListView.onRefreshFinish();                    layoutProgress.showError(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            mListView.startFirst();                            setRefresh();                        }                    });                }            }            @Override            public void onFailure(String string) {                MyToast.showToast(R.string.NETWORKERROR);                mListView.onRefreshFinish();                layoutProgress.showError(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        mListView.startFirst();                        setRefresh();                    }                });            }        });    }    /**     * 修改任务状态     *     * @param context     * @param taskState     */    public void postTaskState(String context, String taskState) {        String ssid = PreferencesUtils.getString(this, LoginActivity.FLAG_SSID);        String CurrentCompanyId = PreferencesUtils.getString(this, LoginActivity.FLAG_ZMSCOMPANYID, "");        Call call = HttpRequest.getIResourceOANetAction().postTaskState(ssid, CurrentCompanyId, mTaskId, context, taskState);        callRequest(call, new HttpCallBack(MissionDetailEntity.class, this, true) {            @Override            public void onSuccess(ResultData mResult) {                if ("0".equals(mResult.getSuccess())) {//0成功                    MyToast.showToast("提交成功");                    mListView.startFirst();                    setRefresh();                } else {                    String message = mResult.getMsg();                    MyToast.showToast(message);                }                if (mProgressDialog.isShowing()) {                    mProgressDialog.dismiss();                }            }            @Override            public void onFailure(String string) {                MyToast.showToast(R.string.NETWORKERROR);                if (mProgressDialog.isShowing()) {                    mProgressDialog.dismiss();                }            }        });    }    /**     * 获取子任务列表     */    public void getChildMissionList() {        //子任务列表        missionList = new ArrayList<>();        String ssid = PreferencesUtils.getString(this, LoginActivity.FLAG_SSID);        String CurrentCompanyId = PreferencesUtils.getString(BaseApp.getContext(), LoginActivity.FLAG_ZMSCOMPANYID, "");        Call call = HttpRequest.getIResourceOANetAction().getMissionList(ssid, mTaskId, "", "0", "", "", 1 + "", 100 + "", CurrentCompanyId);        callRequest(call, new HttpCallBack(MissionEntity.class, this, false) {            @Override            public void onSuccess(ResultData mResult) {                if ("0".equals(mResult.getSuccess())) {//0成功                    List<MissionDetailEntity> list = mResult.getRows();                    if (list.size() == 0) {                        mProgressDialog.show();                        postTaskState("", 13 + "");                    } else {                        if (mList.get(position).getProgress() < 100) {                            MyToast.showToast("进度还未到达100%");                        } else {                            mProgressDialog.show();                            postTaskState("", 13 + "");                        }                    }                } else {                    String message = mResult.getMsg();                    MyToast.showToast(message);                }            }            @Override            public void onFailure(String string) {                MyToast.showToast(R.string.NETWORKERROR);            }        });    }}